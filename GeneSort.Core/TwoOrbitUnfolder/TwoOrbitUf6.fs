namespace GeneSort.Core

///For creating a Perm_Rs, which is generated by the unfolding process, based on an Order6.SeedType
[<CustomEquality; NoComparison>]
type TwoOrbitUf6 = private { seed6TwoOrbitType: TwoOrbitTripleType; twoOrbitUnfolderSteps: TwoOrbitUfStep array; } with
    /// The TwoOrbitUnfolder6 specifies the creation of a Perm_Si of
    /// order 6 * 2^n, where n is the length of perm_RsUnfolderSteps.
    /// <param name="seedType">The Order6.SeedType </param>
    /// <param name="twoOrbitUnfolderSteps">The list of TwoOrbitUfStep (must be non-empty).</param>
    static member create 
            (seed6TwoOrbitType: TwoOrbitTripleType) 
            (twoOrbitUnfolderSteps: TwoOrbitUfStep array) 
            : TwoOrbitUf6 =
        if Array.length twoOrbitUnfolderSteps  < 1 then
            failwith "twoOrbitUnfolderSteps must not be empty"
        { seed6TwoOrbitType = seed6TwoOrbitType; twoOrbitUnfolderSteps = twoOrbitUnfolderSteps; }

    member this.Order with get() : int  =
            6 * (MathUtils.integerPower 2 (Array.length this.twoOrbitUnfolderSteps))

    member this.Seed6TwoOrbitType with get() : TwoOrbitTripleType  =
            this.seed6TwoOrbitType

    member this.TwoOrbitUnfolderSteps with get() : TwoOrbitUfStep array  =
            this.twoOrbitUnfolderSteps

    /// Determines whether this instance equals another TwoOrbitUnfolder.
    override this.Equals (obj: obj) =
        match obj with
        | :? TwoOrbitUf6 as other -> this.seed6TwoOrbitType = other.seed6TwoOrbitType
        | _ -> false

    /// Computes the hash code for this instance.
    override this.GetHashCode () =
        hash (this.seed6TwoOrbitType, this.twoOrbitUnfolderSteps)

    /// Returns a string representation of the TwoOrbitUnfolder.
    override this.ToString () =
        sprintf "TwoOrbitUnfolder6(Seed6TwoOrbitType=%A, twoOrbitUnfolderSteps=%A)" this.seed6TwoOrbitType this.twoOrbitUnfolderSteps


    member this.MakePerm_Si : Perm_Si =

        let seedTwoOrbitPairs = 
                this.seed6TwoOrbitType 
                    |> TwoOrbitTripleType.getTwoOrbits
                    |> TwoOrbitPairOps.fromTwoOrbits 6 |> Seq.toArray

        let twoOrbitPairs = 
                this.twoOrbitUnfolderSteps 
                |> Array.fold (fun pair step -> 
                    let result = TwoOrbitUfStep.unfoldTwoOrbitPairs step pair
                    result
                ) seedTwoOrbitPairs

        Perm_Si.fromTwoOrbitPair (twoOrbitPairs)

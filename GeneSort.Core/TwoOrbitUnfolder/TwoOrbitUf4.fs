namespace GeneSort.Core

///For creating a Perm_Rs, which is generated by the unfolding process, based on an Order4.SeedType
[<CustomEquality; NoComparison>]
type TwoOrbitUf4 = private { seedType: TwoOrbitPairType; twoOrbitUnfolderSteps: TwoOrbitUfStep array; } with
    /// The TwoOrbitUnfolder4 specifies the creation of a Perm_Si of
    /// order 4 * 2^n, where n is the length of twoOrbitUnfolderSteps.
    /// <param name="seedType">The Order4.SeedType </param>
    /// <param name="twoOrbitUnfolderSteps">The list of TwoOrbitUfStep (must be non-empty).</param>
    static member create 
            (seedType: TwoOrbitPairType) 
            (twoOrbitUnfolderSteps: TwoOrbitUfStep array) 
            : TwoOrbitUf4 =
        { seedType = seedType; twoOrbitUnfolderSteps = twoOrbitUnfolderSteps; }

    member this.Order with get() : int  =
            4 * (MathUtils.integerPower 2 (Array.length this.twoOrbitUnfolderSteps))

    member this.TwoOrbitPairType with get() : TwoOrbitPairType  =
            this.seedType

    member this.TwoOrbitUnfolderSteps with get() : TwoOrbitUfStep array  =
            this.twoOrbitUnfolderSteps

    /// Determines whether this instance equals another TwoOrbitUnfolder.
    override this.Equals (obj: obj) =
        match obj with
        | :? TwoOrbitUf4 as other -> this.seedType = other.seedType
        | _ -> false

    /// Computes the hash code for this instance.
    override this.GetHashCode () =
        hash (this.GetType(), this.seedType, this.twoOrbitUnfolderSteps)

    /// Returns a string representation of the TwoOrbitUnfolder.
    override this.ToString () =
        sprintf "TwoOrbitUnfolder4(seedTypes=%A, twoOrbitUnfolderSteps=%A)" this.seedType this.twoOrbitUnfolderSteps 

    member this.MakePerm_Si : Perm_Si =
            let seedTwoOrbitPairs = 
                this.seedType 
                    |> TwoOrbit.getTwoOrbits 
                    |> TwoOrbitPairOps.fromTwoOrbits 4 |> Seq.toArray

            let twoOrbitPairs = 
                    this.twoOrbitUnfolderSteps 
                    |> Array.fold (fun pair step -> 
                        let result = TwoOrbitUfStep.unfoldTwoOrbitPairs step pair
                        result
                    ) seedTwoOrbitPairs

            Perm_Si.fromTwoOrbitPair twoOrbitPairs


module TwoOrbitUnfolder4 =

    let getOrder (twoOrbitUnfolder: TwoOrbitUf4) : int =
            4 * (MathUtils.integerPower 2 (Array.length twoOrbitUnfolder.twoOrbitUnfolderSteps))

    let makeTestTwoOrbitUf4 
            (seedTwoOrbitPairType: TwoOrbitPairType)
            (unfolderTwoOrbitType: TwoOrbitPairType)
            (order: int)
            : TwoOrbitUf4 =

        let twoOrbitUnfolderStepCount  = MathUtils.exactLog2 (order / 4)
        let twoOrbitUfSteps = 
                Array.init
                    twoOrbitUnfolderStepCount
                    (fun dex -> TwoOrbitUfStep.makeUniformUfStep (4 * (MathUtils.integerPower 2 dex)) unfolderTwoOrbitType)

        TwoOrbitUf4.create seedTwoOrbitPairType twoOrbitUfSteps
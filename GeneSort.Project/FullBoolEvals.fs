
namespace GeneSort.Project

open System
open System.IO
open System.Threading

open FSharp.UMX

open GeneSort.Core
open GeneSort.Sorter.Sortable
open GeneSort.Runs.Params
open GeneSort.SortingResults
open GeneSort.Model.Sortable
open GeneSort.SortingOps
open GeneSort.Runs
open GeneSort.Db


module FullBoolEvals =

    let experimentName = "FullBoolEvals"
    let experimentDesc = "FullBoolEvals on RandomSorters with SortingWidth from 4 to 16 generated by Msce, Mssi, Msrs, and Msuf"

    let randomType = rngType.Lcg

    let sortableArrayType = sortableArrayType.Bools
  
    let sortingWidthValues = 
        [4; 6; 8; 12; 16;] |> List.map(fun d -> d.ToString())

    let sortingWidths() : string*string list =
        (runParameters.sortingWidthKey, sortingWidthValues)
        
    let sorterModelKeyValues() : string list =
        [ sorterModelKey.Mcse; 
          sorterModelKey.Mssi;
          sorterModelKey.Msrs; 
          sorterModelKey.Msuf4; 
          sorterModelKey.Msuf6; ]  |> List.map(SorterModelKey.toString)

    let sorterModelKeys() : string*string list =
        (runParameters.sorterModelTypeKey, sorterModelKeyValues() )


    let paramMapFilter (runParameters: runParameters) = 
        let sorterModelKey = runParameters.GetSorterModelKey()
        let sortingWidth = %runParameters.GetSortingWidth()
        let has3factor = (sortingWidth % 3 = 0)

        match sorterModelKey with
        | sorterModelKey.Mcse -> Some runParameters
        | sorterModelKey.Mssi -> Some runParameters
        | sorterModelKey.Msrs -> Some runParameters
        | sorterModelKey.Msuf4 ->
                if has3factor then None else
                Some runParameters
        | sorterModelKey.Msuf6 -> 
                if has3factor then Some runParameters else
                None


    let paramMapRefiner (runParametersSeq: runParameters seq) : runParameters seq = 
        let mutable index = 0

        let enhancer (runParameters : runParameters) : runParameters =
            runParameters

        seq {
            for runParameters in runParametersSeq do
                    let filtrate = paramMapFilter runParameters
                    if filtrate.IsSome then
                        let retVal = enhancer filtrate.Value
                        retVal.SetIndex (UMX.tag<indexNumber> index)
                        yield filtrate.Value
                        index <- index + 1
        }


    let parameterSpans = 
        [ Project.repl1s(); sortingWidths(); sorterModelKeys();]

    let reportNames = [|"Bins"; "Profiles"; "Report3"; "Report4"|]

    let project = 
            Project.create 
                experimentName
                experimentDesc
                reportNames
                parameterSpans
                paramMapRefiner


    let sorterSetSourceProjectName = "RandomSorters4to64"
    let sorterSetSourceProjectFolder = Path.Combine("c:\Projects", sorterSetSourceProjectName)

    //let sorterSetSourceProject = lazy(ProjectOps.loadProject sorterSetSourceProjectFolder)

    let sorterSetSourceProject = 
        lazy((OutputDataFile.getProjectAsync sorterSetSourceProjectFolder) |> MonadUtils.getValue)

    let getSorterSetGenRunParams = 
            lazy (OutputDataFile.getAllRunParametersAsync sorterSetSourceProjectFolder None None)


    let executor 
            (projectFolder: string)
            (runParameters: runParameters) 
            (cts: CancellationTokenSource) 
            (progress: IProgress<string>) : Async<unit> =

        async {
            let index = runParameters.GetIndex()
            let repl = runParameters.GetRepl()
            let sortingWidth = runParameters.GetSortingWidth()

            let! sorterSetGenParams = getSorterSetGenRunParams.Value
            let sourceRunParams =
                    RunParameters.pickByParameters 
                            sorterSetGenParams 
                            [|runParameters.GetSorterModelKvp(); runParameters.GetReplKvp(); runParameters.GetSortingWidthKvp() |]

            let sorterSet = (OutputDataFile.getSorterSetAsync
                                sorterSetSourceProjectFolder
                                sourceRunParams) |> MonadUtils.getValue

            let sorterTestModel = MsasF.create sortingWidth |> sortableTestModel.MsasF
            let sortableTests = SortableTestModel.makeSortableTests sorterTestModel sortableArrayType
            let sorterSetEval = SorterSetEval.makeSorterSetEval sorterSet sortableTests

            cts.Token.ThrowIfCancellationRequested()

            do! OutputDataFile.saveToFileAsync projectFolder (Some runParameters) (sorterSetEval |> outputData.SorterSetEval)

            progress.Report(sprintf "Finished executing Run %d  Cycle  %d \n" %index %repl)
        }



    // Executor to generate a report for each SorterTest across all SorterTestSets, one line per SorterTest
    let binReportExecutor 
            (projectFolder: string)
            (cts: CancellationTokenSource) 
            (progress: IProgress<string>) : unit =
            try
                progress.Report(sprintf "Generating Bin report in project %s"  projectFolder)
                let runParamsA = 
                    OutputDataFile.getAllRunParametersAsync 
                        projectFolder
                        (Some cts.Token) (Some progress) |> Async.RunSynchronously

                let summaries = 
                    runParamsA
                    |> Seq.map (fun runParams ->
                        let ssEvalPath = OutputDataFile.getAllOutputDataFilePaths projectFolder (Some runParams) outputDataType.SorterSetEval
                        progress.Report (sprintf "Checking for file %s" ssEvalPath)
                        try
                            let swFull = runParams.GetSortingWidth() 
                            let sorterModelKey =  runParams.GetSorterModelKey()
                            let sorterSetEval = (OutputDataFile.getSorterSetEvalAsync projectFolder runParams)
                                                |> MonadUtils.getValue
                            let sorterSetEvalBins = SorterSetEvalBins.create 1 sorterSetEval

                            let prpt = SorterSetEvalBins.getBinCountReport sorterSetEvalBins
                            let appended = prpt |> Array.map(
                                        fun aa -> (swFull, (sorterModelKey |> SorterModelKey.toString), aa.[0], aa.[1], aa.[2], aa.[3]))
                            appended
                        with e ->
                         failwith (sprintf "Error processing file %s: %s" ssEvalPath e.Message)
                    )   
                    |> Array.concat
                    |> Seq.toList

                // Generate the Markdown report, one line per SorterTest
                let reportContent =
                    [ "# sorterEval Report"
                      sprintf "Generated on %s" (DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
                      sprintf "Project: %s" projectFolder
                      ""
                      "Sorting Width\t SorterModel\t ceLength\t stageLength\t binCount\t unsortedReport"
                    ]
                    @ (summaries
                       |> List.map (
                            fun (sortingWidth, sorterModelKey, ceLength, stageLength, binCount, unsortedReport) ->
                                    sprintf "%d \t %s \t %s \t %s \t %s \t %s "
                                                %sortingWidth sorterModelKey ceLength stageLength binCount unsortedReport))
                    |> String.concat "\n"

                // Save the report to a file
                let reportFilePath = Path.Combine(
                            projectFolder, 
                            sprintf "%s_SorterEvalReport_%s.txt" "SorterSetEvalSamples" (DateTime.Now.ToString("yyyyMMdd_HHmmss")))
                File.WriteAllText(reportFilePath, reportContent)

                Console.WriteLine(sprintf "SorterTest bin report saved to %s" reportFilePath)

            with ex ->
                progress.Report(sprintf "Error generating Bin report for %s: %s" "SorterTestSet" ex.Message)
                raise ex



    // Executor to generate a report for each SorterTest across all SorterTestSets, one line per SorterTest
    let ceUseProfileReportExecutor
            (projectFolder: string)
            (cts: CancellationTokenSource) 
            (progress: IProgress<string>) : unit =
            try
                let binCount = 20
                let blockGrowthRate = 1.2

                let runParamsA = OutputDataFile.getAllRunParametersAsync 
                                    projectFolder
                                    (Some cts.Token) (Some progress) |> Async.RunSynchronously

                let summaries = 
                    runParamsA
                    |> Seq.map 
                        (
                            fun runParams ->
                                let ssEvalPath = OutputDataFile.getAllOutputDataFilePaths 
                                                    projectFolder 
                                                    (Some runParams) outputDataType.SorterSetEval

                                progress.Report (sprintf "Checking for file %s" ssEvalPath)
                                try
                                    let swFull = runParams.GetSortingWidth() 
                                    let sorterModelKey =  runParams.GetSorterModelKey()
                                    let sorterSetEval = (OutputDataFile.getSorterSetEvalAsync projectFolder runParams)
                                                        |> MonadUtils.getValue

                                    let sorterSetCeUseProfile = 
                                        SorterSetCeUseProfile.makeSorterSetCeUseProfile 
                                                binCount blockGrowthRate sorterSetEval
                                    let linePrefix = sprintf "%s \t %s" 
                                                                (%swFull.ToString()) 
                                                                (sorterModelKey |> SorterModelKey.toString)

                                    SorterSetCeUseProfile.makeCsvLines linePrefix sorterSetCeUseProfile
                                with e ->
                                 failwith (sprintf "Error processing file %s: %s" ssEvalPath e.Message)
                        )   
                    |> Array.concat
                    |> Seq.toList

                // Generate the Markdown report, one line per SorterTest
                let reportContent =
                    [ "# sorterCeProfile Report"
                      sprintf "Generated on %s" (DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
                      sprintf "Project: %s" projectFolder
                      ""
                      "Sorting Width\tSorterModel\tsorterId\tsorterSetId\tsorterTestsId\tlastCe"
                    ]
                    @ summaries
                    |> String.concat "\n"


                // Save the report to a file
                let reportFilePath = Path.Combine(
                                        projectFolder, 
                                        sprintf "SorterCeUseReport_%s.txt" 
                                                (DateTime.Now.ToString("yyyyMMdd_HHmmss")))

                File.WriteAllText(reportFilePath, reportContent)

                progress.Report(sprintf "Ce Profile report saved to %s" reportFilePath)

            with ex ->
                progress.Report(sprintf "Error generating Ce Profile report for %s: %s" "SorterTestSet" ex.Message)
                raise ex


    let RunAll
        (rootFolder: string)
        (progress: IProgress<string>) =
        let cts = new CancellationTokenSource()
        ProjectOps.executeRunParametersSeq rootFolder project 8 executor project.RunParametersArray cts progress



    let RunSorterEvalReport
        (projectFolder: string)
        (progress: IProgress<string>) =
       let cts = new CancellationTokenSource()
       (binReportExecutor projectFolder cts progress)
       (ceUseProfileReportExecutor projectFolder cts progress)











namespace GeneSort.Project

open System
open System.IO
open System.Threading

open FSharp.UMX
open MessagePack
open MessagePack.FSharp
open MessagePack.Resolvers

open GeneSort.Core
open GeneSort.Sorter
open GeneSort.Sorter.Sortable
open GeneSort.Project.Params
open GeneSort.Model.Sorter.Ce
open GeneSort.Model.Sorter.Si
open GeneSort.Model.Sorter.Uf4
open GeneSort.Model.Sorter.Rs
open GeneSort.Model.Sorter
open GeneSort.Model.Sortable
open GeneSort.SortingOps
open GeneSort.SortingResults
open GeneSort.SortingOps.Mp
open GeneSort.Model.Sorter.Uf6
open OutputData

module FullBoolEvals =

    let projectDir = "c:\Projects"

    let experimentName = "FullBoolEvals"
    let experimentDesc = "FullBoolEvals on RandomSorters with SortingWidth from 4 to 16 generated by Msce, Mssi, Msrs, and Msuf"

    let randomType = rngType.Lcg
    let excludeSelfCe = true


    let getSorterCountForSortingWidth (factor:int) (sortingWidth: int<sortingWidth>) : int<sorterCount> =
        match %sortingWidth with
        | 4 -> (10 * factor) |> UMX.tag<sorterCount>
        | 6 -> (10 * factor) |> UMX.tag<sorterCount>
        | 8 -> (10 * factor) |> UMX.tag<sorterCount>
        | 12 -> (10 * factor) |> UMX.tag<sorterCount>
        | 16 -> (10 * factor) |> UMX.tag<sorterCount>
        | 24 -> (2 * factor) |> UMX.tag<sorterCount>
        | 32 -> (50 * factor) |> UMX.tag<sorterCount>
        | 48 -> (10 * factor) |> UMX.tag<sorterCount>
        | 64 -> (10 * factor) |> UMX.tag<sorterCount>
        | 96 -> (10 * factor) |> UMX.tag<sorterCount>
        | _ -> failwithf "Unsupported sorting width: %d" (%sortingWidth)


    let getStageLengthForSortingWidth (sortingWidth: int<sortingWidth>) : int<stageLength> =
        match %sortingWidth with
        | 4 -> 15 |> UMX.tag<stageLength>
        | 6 -> 20 |> UMX.tag<stageLength>
        | 8 -> 60 |> UMX.tag<stageLength>
        | 12 -> 80 |> UMX.tag<stageLength>
        | 16 -> 200 |> UMX.tag<stageLength>
        | 24 -> 400 |> UMX.tag<stageLength>
        | 32 -> 600 |> UMX.tag<stageLength>
        | 48 -> 2000 |> UMX.tag<stageLength>
        | 64 -> 4000 |> UMX.tag<stageLength>
        | 96 -> 10000 |> UMX.tag<stageLength>
        | _ -> failwithf "Unsupported sorting width: %d" (%sortingWidth)


    let sortableArrayType = sortableArrayType.Bools
  
    let sortingWidthValues = 
        [4; 6; 8; 12; 16;] |> List.map(fun d -> d.ToString())

    let sortingWidths() : string*string list =
        (runParameters.sortingWidthKey, sortingWidthValues)
        
    let sorterModelKeyValues() : string list =
        [ sorterModelKey.Mcse; 
          sorterModelKey.Mssi;
          sorterModelKey.Msrs; 
          sorterModelKey.Msuf4; 
          sorterModelKey.Msuf6; ]  |> List.map(SorterModelKey.toString)

    let sorterModelKeys() : string*string list =
        (runParameters.sorterModelTypeKey, sorterModelKeyValues() )

    let replValues() = 
        [1; 2; 3; 4;] |> List.map(fun d -> d.ToString())

    let repls() : string*string list =
        (runParameters.replKey, replValues() )


    let paramMapRefiner (runParameters: runParameters) = 
        let sorterModelKey = runParameters.GetSorterModelKey()
        let sortingWidth = %runParameters.GetSortingWidth()
        let has3factor = (sortingWidth % 3 = 0)

        match sorterModelKey with
        | sorterModelKey.Mcse -> Some runParameters
        | sorterModelKey.Mssi -> Some runParameters
        | sorterModelKey.Msrs -> Some runParameters
        | sorterModelKey.Msuf4 ->
                if has3factor then None else
                Some runParameters
        | sorterModelKey.Msuf6 -> 
                if has3factor then Some runParameters else
                None

    let parameterSet = 
        [ repls();  sortingWidths(); sorterModelKeys();]

    let reportNames = [|"Bins"; "Profiles"; "Report3"; "Report4"|]

    let workspace = 
            Workspace.create 
                experimentName
                experimentDesc 
                projectDir
                reportNames
                parameterSet
                paramMapRefiner


    let executor (workspace: workspace) (run: run) : Async<unit> = // (cts: CancellationTokenSource) (progress: IProgress<string>) : Async<unit> =
        async {
            let repl = run.Repl
            Console.WriteLine(sprintf "Executing Run %d  %s" run.Index (run.RunParameters.toString()))

            let sorterModelKey = run.RunParameters.GetSorterModelKey()
            let sortingWidth = run.RunParameters.GetSortingWidth()

            let stageLength = getStageLengthForSortingWidth sortingWidth
            run.RunParameters.SetStageLength stageLength

            let ceLength = (((float %stageLength) * (float %sortingWidth) * 0.6) |> int) |> UMX.tag<ceLength>
            run.RunParameters.SetCeLength ceLength


            let sorterModelMaker =
                match sorterModelKey with
                | sorterModelKey.Mcse -> (MsceRandGen.create randomType sortingWidth excludeSelfCe ceLength) |> sorterModelMaker.SmmMsceRandGen
                | sorterModelKey.Mssi -> (MssiRandGen.create randomType sortingWidth stageLength) |> sorterModelMaker.SmmMssiRandGen
                | sorterModelKey.Msrs -> 
                    let opsGenRatesArray = OpsGenRatesArray.createUniform %stageLength
                    (msrsRandGen.create randomType sortingWidth opsGenRatesArray) |> sorterModelMaker.SmmMsrsRandGen
                | sorterModelKey.Msuf4 -> 
                    let uf4GenRatesArray = Uf4GenRatesArray.createUniform %stageLength %sortingWidth
                    (msuf4RandGen.create randomType sortingWidth stageLength uf4GenRatesArray) |> sorterModelMaker.SmmMsuf4RandGen
                | sorterModelKey.Msuf6 -> 
                    let uf6GenRatesArray = Uf6GenRatesArray.createUniform %stageLength %sortingWidth
                    (msuf6RandGen.create randomType sortingWidth stageLength uf6GenRatesArray) |> sorterModelMaker.SmmMsuf6RandGen

            let replFactor = if (%repl = 0) then 1 else 1
            let sorterCount = sortingWidth |> getSorterCountForSortingWidth replFactor
            run.RunParameters.SetSorterCount sorterCount

            let firstIndex = (%repl * %sorterCount) |> UMX.tag<sorterCount>
            
            let sorterModelSetMaker = sorterModelSetMaker.create sorterModelMaker firstIndex sorterCount
            let sorterModelSet = sorterModelSetMaker.MakeSorterModelSet (Rando.create)
            let sorterSet = SorterModelSet.makeSorterSet sorterModelSet

            let sorterTestModel = MsasF.create sortingWidth |> sortableTestModel.MsasF
            let sortableTests = SortableTestModel.makeSortableTests sorterTestModel sortableArrayType
            let sorterSetEval = SorterSetEval.makeSorterSetEval sorterSet sortableTests

            do! OutputData.saveToFile workspace (Some run.RunParameters) (sorterSet |> outputData.SorterSet)
            do! OutputData.saveToFile workspace (Some run.RunParameters) (sorterSetEval |> outputData.SorterSetEval)
            do! OutputData.saveToFile workspace (Some run.RunParameters) (sorterModelSetMaker |> outputData.SorterModelSetMaker)

            Console.WriteLine(sprintf "Finished executing Run %d  Cycle  %d \n" run.Index %repl)
        }


    // Executor to generate a report for each SorterTest across all SorterTestSets, one line per SorterTest
    let binReportExecutor 
            (workspace: workspace) 
            (cts: CancellationTokenSource) 
            (progress: IProgress<string>) : unit =
            try
                progress.Report(sprintf "Generating Bin report in workspace %s"  workspace.WorkspaceFolder)
                let runParamsA = getRunParametersAsync workspace cts.Token progress |> Async.RunSynchronously

                let summaries = 
                    runParamsA
                    |> Seq.map (fun runParams ->
                        let ssEvalPath = OutputData.getOutputDataFileName workspace (Some runParams) outputDataType.SorterSetEval
                        progress.Report (sprintf "Checking for file %s" ssEvalPath)
                        try
                            let swFull = runParams.GetSortingWidth() 
                            let sorterModelKey =  runParams.GetSorterModelKey()
                            let sorterSetEval = getSorterSetEval workspace runParams
                            let sorterSetEvalBins = SorterSetEvalBins.create 1 sorterSetEval

                            let prpt = SorterSetEvalBins.getBinCountReport sorterSetEvalBins
                            let appended = prpt |> Array.map(fun aa -> (swFull, (sorterModelKey |> SorterModelKey.toString), aa.[0], aa.[1], aa.[2], aa.[3]))
                            appended
                        with e ->
                         failwith (sprintf "Error processing file %s: %s" ssEvalPath e.Message)
                    )   
                    |> Array.concat
                    |> Seq.toList

                // Generate the Markdown report, one line per SorterTest
                let reportContent =
                    [ "# sorterEval Report"
                      sprintf "Generated on %s" (DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
                      sprintf "Workspace: %s" workspace.WorkspaceFolder
                      ""
                      "Sorting Width\t SorterModel\t ceLength\t stageLength\t binCount\t unsortedReport"
                    ]
                    @ (summaries
                       |> List.map (
                            fun (sortingWidth, sorterModelKey, ceLength, stageLength, binCount, unsortedReport) ->
                                    sprintf "%d \t %s \t %s \t %s \t %s \t %s " %sortingWidth sorterModelKey ceLength stageLength binCount unsortedReport))
                    |> String.concat "\n"

                // Save the report to a file
                let reportFilePath = Path.Combine(workspace.WorkspaceFolder, sprintf "%s_SorterEvalReport_%s.txt" "SorterSetEvalSamples" (DateTime.Now.ToString("yyyyMMdd_HHmmss")))
                File.WriteAllText(reportFilePath, reportContent)

                Console.WriteLine(sprintf "SorterTest bin report saved to %s" reportFilePath)

            with ex ->
                progress.Report(sprintf "Error generating Bin report for %s: %s" "SorterTestSet" ex.Message)
                raise ex





    // Executor to generate a report for each SorterTest across all SorterTestSets, one line per SorterTest
    let ceUseProfileReportExecutor (workspace: workspace) (cts: CancellationTokenSource) (progress: IProgress<string>) : unit =
            try
                let binCount = 20
                let blockGrowthRate = 1.2

                let runParamsA = getRunParametersAsync workspace cts.Token progress |> Async.RunSynchronously

                let summaries = 
                    runParamsA
                    |> Seq.map (fun runParams ->
                        let ssEvalPath = OutputData.getOutputDataFileName workspace (Some runParams) outputDataType.SorterSetEval
                        progress.Report (sprintf "Checking for file %s" ssEvalPath)
                        try
                            let swFull = runParams.GetSortingWidth() 
                            let sorterModelKey =  runParams.GetSorterModelKey()
                            let sorterSetEval = getSorterSetEval workspace runParams
                            let sorterSetCeUseProfile = SorterSetCeUseProfile.makeSorterSetCeUseProfile binCount blockGrowthRate sorterSetEval
                            let linePrefix = sprintf "%s \t %s" (%swFull.ToString()) (sorterModelKey |> SorterModelKey.toString)

                            SorterSetCeUseProfile.makeCsvLines linePrefix sorterSetCeUseProfile
                        with e ->
                         failwith (sprintf "Error processing file %s: %s" ssEvalPath e.Message)
                    )   
                    |> Array.concat
                    |> Seq.toList


                // Generate the Markdown report, one line per SorterTest
                let reportContent =
                    [ "# sorterCeProfile Report"
                      sprintf "Generated on %s" (DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
                      sprintf "Workspace: %s" workspace.WorkspaceFolder
                      ""
                      "Sorting Width\tSorterModel\tsorterId\tsorterSetId\tsorterTestsId\tlastCe"
                    ]
                    @ summaries
                    |> String.concat "\n"


                // Save the report to a file
                let reportFilePath = Path.Combine(workspace.WorkspaceFolder, sprintf "SorterCeUseReport_%s.txt" (DateTime.Now.ToString("yyyyMMdd_HHmmss")))
                File.WriteAllText(reportFilePath, reportContent)

                progress.Report(sprintf "Ce Profile report saved to %s" reportFilePath)

            with ex ->
                progress.Report(sprintf "Error generating Ce Profile report for %s: %s" "SorterTestSet" ex.Message)
                raise ex


    // Progress reporter that prints to console
    let progress = 
        { new IProgress<string> with
            member _.Report(msg) = printfn "%s" msg }


    let RunAll() =
        let cts = new CancellationTokenSource()
        let runs = WorkspaceOps.getRuns2 workspace
        WorkspaceOps.executeWorkspace2 workspace 8 executor runs //cts progress


    let RunSorterEvalReport() =
       let cts = new CancellationTokenSource()
       (binReportExecutor workspace cts progress)
       (ceUseProfileReportExecutor workspace cts progress)









